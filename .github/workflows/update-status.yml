name: Publish image update status

on:
  schedule:
    - cron: "*/15 * * * *"   # every 15 min
  workflow_dispatch: {}       # allow manual run

permissions:
  contents: write             # needed to commit update.json

jobs:
  status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get backend digest from GHCR
        id: be
        run: |
          set -e
          REPO="eewpw/eewpw-backend"; TAG="master"
          TOKEN=$(curl -fsSL "https://ghcr.io/token?service=ghcr.io&scope=repository:${REPO}:pull" | jq -r .token)
          DIGEST=$(curl -fsSLI -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.oci.image.index.v1+json, application/vnd.docker.distribution.manifest.v2+json" \
            "https://ghcr.io/v2/${REPO}/manifests/${TAG}" \
            | tr -d '\r' | awk '/^Docker-Content-Digest:/ {print $2}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Get frontend digest from GHCR
        id: fe
        run: |
          set -e
          REPO="eewpw/eewpw-dashboard"; TAG="master"
          TOKEN=$(curl -fsSL "https://ghcr.io/token?service=ghcr.io&scope=repository:${REPO}:pull" | jq -r .token)
          DIGEST=$(curl -fsSLI -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.oci.image.index.v1+json, application/vnd.docker.distribution.manifest.v2+json" \
            "https://ghcr.io/v2/${REPO}/manifests/${TAG}" \
            | tr -d '\r' | awk '/^Docker-Content-Digest:/ {print $2}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Compute new status JSON
        id: buildjson
        run: |
          NEW_BE="${{ steps.be.outputs.digest }}"
          NEW_FE="${{ steps.fe.outputs.digest }}"
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # Read previous values if file exists
          if [ -f update.json ]; then
            OLD_BE=$(jq -r '.backend.digest // empty' update.json)
            OLD_FE=$(jq -r '.frontend.digest // empty' update.json)
          else
            OLD_BE=""
            OLD_FE=""
          fi

          echo "old_be=$OLD_BE" >> $GITHUB_OUTPUT
          echo "old_fe=$OLD_FE" >> $GITHUB_OUTPUT
          echo "new_be=$NEW_BE" >> $GITHUB_OUTPUT
          echo "new_fe=$NEW_FE" >> $GITHUB_OUTPUT

          # Prepare the new content (but don't write it yet)
          jq -n --arg be "$NEW_BE" --arg fe "$NEW_FE" --arg ts "$TS" \
            '{backend:{digest:$be}, frontend:{digest:$fe}, updated:$ts}' > update.new.json

      - name: Update file only if digests changed
        if: steps.buildjson.outputs.old_be != steps.buildjson.outputs.new_be || steps.buildjson.outputs.old_fe != steps.buildjson.outputs.new_fe
        run: |
          mv update.new.json update.json
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add update.json
          git commit -m "chore: update image digests [skip ci]" || echo "no changes"
          git push

      - name: Skip update (no digest change)
        if: steps.buildjson.outputs.old_be == steps.buildjson.outputs.new_be && steps.buildjson.outputs.old_fe == steps.buildjson.outputs.new_fe
        run: echo "No digest change; not committing."